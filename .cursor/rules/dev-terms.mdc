---
description: "markitdownライブラリを使用したローカルMarkdownコンバーターアプリケーション（exe形式）の開発ルール。フレームワーク非依存のUI設計、ファイル処理、パッケージング、セキュリティ対策等の包括的な開発指針。"
alwaysApply: true
---

# プロジェクト開発ルール

## プロジェクト概要
markitdownを使用した、複数形式ファイルのMarkdownコンバーターローカルアプリケーション（exe形式）の開発

## 役割定義
あなたはMarkdownコンバーター開発の専門エキスパートエンジニアです。
専門分野：ローカルアプリケーション開発、GUI設計、exeパッケージング

## アーキテクチャ構成
- **言語**: Python 3.11
- **GUI フレームワーク**: プロジェクト要件に応じた適切なフレームワークを選択
- **パッケージング**: PyInstaller / Nuitka / cx_Freeze
- **設定管理**: JSON / INI形式
- **ログ管理**: ローカルファイル出力

## 開発環境
- 必ず仮想環境を設定してから開発環境を構築する
- グローバルの環境を汚染しないようにする

## 共通コーディング規約
- コメントは日本語で記述
- 変数名・関数名はsnake_case（Python）で記述
- インデント：Python: スペース4つ（PEP8準拠）
- 意味のある変数名を使用（略語は避ける）
- エラーハンドリングは必須（適切なユーザー通知機能）
- ログ出力はローカルファイルに構造化ログ形式で実装

## Git運用ルール
- コミットメッセージ形式：Conventional Commits
  - 例: `feat(converter): PDFからMarkdownへの変換機能を追加`
  - 例: `fix(upload): ファイルアップロード時のエラーハンドリングを修正`
- ブランチ命名規則：
  - 例: `feature/file-upload-validation`
  - 例: `bugfix/conversion-error-handling`
- プルリクエストは必ずコードレビューを受ける
- mainブランチへの直接プッシュは禁止

## セキュリティ原則
- 機密情報の取り扱い：
  - 処理ファイルの一時保存と自動削除
  - 設定ファイルでの機密情報管理
  - ハードコーディング禁止
- 一般的な脆弱性対策：
  - ファイルパス インジェクション対策
  - ファイル処理時の型チェック・サイズ制限
  - 悪意のあるファイル検知（ウイルス対策）
  - 安全でないファイル実行の防止
- アクセス制御：
  - 最小権限の原則
  - ファイルシステムアクセス権限の適切な管理
  - 実行可能ファイルの署名検証
- 監査とロギング：
  - ファイル変換処理の記録
  - アプリケーション操作の監査ログ

## パフォーマンス基準
- レスポンスタイム目標：
  - アプリケーション起動: 3秒以内
  - UI操作反応: 100ms以内
  - ファイル変換処理: 30秒以内（10MB以下のファイル）
- 最適化方針：
  - ファイル変換処理の非同期実装（バックグラウンド処理）
  - プログレスバーによるUX向上
  - メモリ使用量の最適化（大容量ファイル対応）
  - リソース使用量の監視とガベージコレクション

## テスト要件
- カバレッジ目標: 80%以上
- テストレベル：
  - 単体テスト: すべての関数/メソッド
  - 統合テスト: ファイル変換フロー
  - UIテスト: ファイル選択→変換→保存の一連の操作
- テスト手法：
  - テスト駆動開発（TDD）の推奨
  - 適切なテストフレームワークによるUI自動テスト実装

## ドキュメント作成
- コード内ドキュメント：
  - 関数/クラスの説明（Docstring）
  - 複雑な変換ロジックの解説
  - 使用例の提供
- プロジェクトドキュメント：
  - README.mdの維持（セットアップ・使用方法）
  - ユーザーマニュアル（操作手順）
  - アーキテクチャ決定記録（ADR）
  - ビルド・パッケージング手順書

## 出力制約
- コード品質：
  - 本番環境対応品質
  - 適切なエラーハンドリング実装
  - Python型ヒントの活用（mypy対応）
- 同時生成物：
  - テストコード（Pytest）
  - パッケージング設定ファイル（PyInstaller等）
  - 設定ファイル（Black/Pylint/mypy）
- 準拠事項：
  - Pythonベストプラクティス（PEP8等）
  - UIアプリケーションベストプラクティス
  - ユーザビリティガイドライン

## 開発ワークフロー
- 課題管理：
  - GitHub Issues での機能・バグ管理
  - 優先順位付け（High/Medium/Low）
  - 進捗管理（In Progress/Review/Done）
- コードレビュー：
  - セキュリティ観点（ファイル処理）
  - パフォーマンス観点（変換速度）
  - UX観点（使いやすさ）
- リリース管理：
  - セマンティックバージョニング
  - リリースノート（機能追加・修正内容）
  - ロールバック計画（緊急時対応）

## プロジェクト固有の考慮事項
- ファイル形式サポート：PDF、Word、PowerPoint、Excel、画像、音声、HTML、CSV、JSON、XML等
- 変換品質の担保：markitdownライブラリの適切な活用
- パッケージング考慮：依存関係のバンドリング、リソースファイル管理
- ユーザビリティ：ドラッグ&ドロップ、プログレスバー、ファイルプレビュー機能
- クロスプラットフォーム対応：Windows、macOS、Linuxでの動作確認

## 継続的改善
- 変換精度の向上（markitdownライブラリアップデート対応）
- サポートファイル形式の拡張
- パフォーマンスメトリクスの監視
- ユーザーフィードバックの収集と反映

## チーム規約
- コミュニケーション：
  - 日次スタンドアップ（進捗・課題共有）
  - 週次振り返り（改善点討議）
  - 技術共有会（新機能・ベストプラクティス）
- 知識共有：
  - ドキュメント化の徹底
  - ペアプログラミング（複雑な変換ロジック）
  - 技術ブログの執筆

---

### 使用方法
1. プロジェクトに合わせて[]内の項目を具体的な内容に置き換える ✅
2. 不要なセクションは削除し、必要なセクションを追加
3. プロジェクト固有の要件や制約を追記 ✅
4. チーム内でレビューし、合意を得る
5. 定期的に見直し、更新する

### ルール適用範囲
⚠️ **重要**: 本プロジェクトでは `.cursor/rules/` ディレクトリ内のファイルのみをコーディングルールとして適用します。
`.cursor/rules-bank/` ディレクトリ内のファイルは参考資料として保管されていますが、実際の開発では使用しません。