---
description: "markitdownを使用したローカルアプリケーション開発ルール。GUI設計、ファイル処理、exeパッケージング、セキュリティ対策、アーキテクチャパターン等の開発指針。"
alwaysApply: true
---

# ローカルアプリケーション開発ルール

## 役割定義
あなたはバックエンドアプリケーション開発のエキスパートです。
専門分野：AI機能設計、ファイル処理、exeパッケージング、ユーザーエクスペリエンス最適化、データベース設計

## 技術スタック
- **言語**: Python 3.11
- **開発フレームワーク**: FastAPI
- **メインライブラリ**: markitdown(https://github.com/microsoft/markitdown)
- **パッケージング**: PyInstaller, cx_Freeze, Nuitka
- **テスト**: pytest (適切なUIテストフレームワークを必要に応じて選択)
- **リンター**: Black, Pylint, mypy
- **フォーマッター**: Black, Flake8


## コーディング規約

### Python規約
- Python Enhancement Proposal 8 (PEP8) に完全準拠
- 行の最大長: 88文字（Black標準）
- インデント: スペース4つ
- 関数・クラス間: 2行空行
- モジュールレベルでのインポート順序: 標準ライブラリ → 第三者ライブラリ → ローカルインポート

### フォーマッター設定

#### Black設定 (pyproject.toml)
```toml
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
```

#### Flake8設定 (.flake8)
```ini
[flake8]
max-line-length = 88
select = E,W,F
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by Black)
    W503,  # line break before binary operator
exclude = 
    .git,
    __pycache__,
    .venv,
    .eggs,
    *.egg,
    build,
    dist
per-file-ignores = 
    __init__.py:F401
```

### コード品質チェック
```bash
# 自動フォーマット
black .
isort .

# コード品質チェック
flake8 .
pylint src/
mypy src/

# 一括実行
pre-commit run --all-files
```

## アーキテクチャパターン
- MVC (Model-View-Controller) パターンの採用
- Observer パターンによるイベント処理
- Strategy パターンによるファイル形式対応
- Singleton パターンによる設定管理
- Command パターンによる操作の抽象化

## 命名規則
- **ファイル・モジュール**: snake_case (`user_service.py`)
- **クラス**: PascalCase (`UserService`, `UserModel`)
- **関数・変数**: snake_case (`get_user_by_id`)
- **定数**: SCREAMING_SNAKE_CASE (`MAX_RETRY_COUNT`)
- **プライベートメソッド**: アンダースコア接頭辞 (`_internal_method`)


## エラーハンドリング
- **階層的例外設計**: 基底例外クラスから派生させた具体的な例外クラスを定義
- **ユーザーエラー通知**: 適切なUI要素による視覚的エラー通知（ダイアログ、ステータス表示等）
- **詳細なエラーログ**: ローカルログファイルによるトレーサビリティ確保
- **ユーザーフレンドリーなメッセージ**: 技術的詳細を隠した分かりやすいエラーメッセージ
- **ファイル処理エラー**: ファイル読み書き、アクセス権限エラーの適切な処理
- **パッケージング関連エラー**: 依存関係やリソースファイルの欠如への対応
- **メモリ・リソース管理**: 大容量ファイル処理時のメモリ制限とリソース解放


## 出力形式・UI設計
- ファイル出力は markdownで統一
- プログレスバーによる処理進捗の視覚化
- ドラッグ&ドロップによる直感的なファイル入力
- 変換結果のプレビュー機能
- 設定の永続化（JSON/INI形式）

## 追加指示
- exeファイル作成時はPyInstallerまたはNuitkaを使用
- アプリケーションアイコン（.ico）の設定
- Windows互換性の確保（パス処理、エンコーディング対応）
- リソースファイルの適切なバンドリング
- アプリケーション更新機能の実装検討
- ローカル設定ファイル（config.json）による設定管理
- ログローテーション機能の実装