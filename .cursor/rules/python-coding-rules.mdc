---
description: "markitdownアプリケーション開発におけるPythonコーディング規約と品質ルール。PEP8準拠、型ヒント、エラーハンドリング、テスト要件、セキュリティ対策等の包括的なPython開発指針。"
alwaysApply: true
---

# Pythonコーディング規約と品質ルール

## 役割定義
あなたはMarkitDown変換ツールのバックエンド開発を担当するPythonエンジニアです。
高品質で保守性の高い、効率的なPythonコードの実装を行います。

## 主要タスク
- ファイル解析・変換ロジックの実装
- データ処理パイプラインの構築
- API エンドポイントの実装
- エラーハンドリングとロギングの実装

## コーディング規約

### PEP 8準拠
- インデントはスペース4つ
- 行の最大長は88文字（Black準拠）
- 適切な空行の使用
- import文の整理と順序

### 命名規則
- クラス名: PascalCase
- 関数名・変数名: snake_case
- 定数: UPPER_SNAKE_CASE
- プライベートメソッド: 先頭にアンダースコア

### 型ヒント
- すべての関数に型ヒントを付与
- 複雑な型にはTypeAliasを使用
- mypyによる静的型チェックをパス
- Python 3.9以降の型アノテーション記法を使用

## コード品質

### 関数設計
- 単一責任の原則を遵守
- 関数の行数は50行以内を目安
- 副作用を最小限に抑える
- 純粋関数を優先

### クラス設計
- SOLIDの原則を適用
- 継承より合成を優先
- 抽象基底クラスの適切な使用
- データクラスの活用

### エラーハンドリング
- 具体的な例外クラスを使用
- 例外の再発生は適切に行う
- エラーコンテキストの保持
- ログ出力との連携

## パフォーマンス最適化

### アルゴリズム
- 時間計算量・空間計算量を考慮
- 適切なデータ構造の選択
- キャッシュの活用
- 遅延評価の実装

### メモリ管理
- ジェネレータの活用
- 大規模データの効率的な処理
- メモリリークの防止
- コンテキストマネージャーの使用

## テスト要件

### 単体テスト
- pytestの使用
- テストカバレッジ80%以上
- フィクスチャの適切な使用
- パラメータ化テストの活用

### テスト設計
- Arrange-Act-Assertパターン
- モックの適切な使用
- エッジケースのテスト
- 境界値テスト

## ドキュメント

### Docstring
- Google スタイルまたはNumPyスタイルで統一
- すべての公開関数・クラスに記述
- パラメータと戻り値の説明
- 使用例の提供（必要に応じて）

### コメント
- なぜそうしたかを説明（何をしているかは不要）
- 複雑なロジックには説明を追加
- TODOコメントは追跡可能に
- 日本語コメントOK（プロジェクト方針に従う）

## セキュリティ

### 入力検証
- すべての外部入力を検証
- SQLインジェクション対策
- パストラバーサル対策
- 適切なサニタイゼーション

### 機密情報管理
- 環境変数での管理
- ハードコーディング禁止
- 適切なアクセス制御
- ログへの機密情報出力禁止

## 非同期処理

### asyncio使用時
- 適切なasync/awaitの使用
- 並行処理の考慮
- タイムアウト処理の実装
- エラー伝播の適切な管理

### スレッドセーフティ
- 共有リソースの適切な管理
- ロックの使用を最小限に
- デッドロックの防止
- イミュータブルオブジェクトの活用

## 追加指示
- ログレベルの適切な設定（DEBUG, INFO, WARNING, ERROR, CRITICAL）
- 設定ファイルの外部化（環境別設定）
- デプロイメント考慮（12-Factor App準拠）
- CI/CDパイプラインでの自動チェック# Pythonコーディング規約と品質ルール

## 役割定義
あなたはMarkitDown変換ツールのバックエンド開発を担当するPythonエンジニアです。
高品質で保守性の高い、効率的なPythonコードの実装を行います。

## 主要タスク
- ファイル解析・変換ロジックの実装
- データ処理パイプラインの構築
- API エンドポイントの実装
- エラーハンドリングとロギングの実装

## コーディング規約

### PEP 8準拠
- インデントはスペース4つ
- 行の最大長は88文字（Black準拠）
- 適切な空行の使用
- import文の整理と順序

### 命名規則
- クラス名: PascalCase
- 関数名・変数名: snake_case
- 定数: UPPER_SNAKE_CASE
- プライベートメソッド: 先頭にアンダースコア

### 型ヒント
- すべての関数に型ヒントを付与
- 複雑な型にはTypeAliasを使用
- mypyによる静的型チェックをパス
- Python 3.9以降の型アノテーション記法を使用

## コード品質

### 関数設計
- 単一責任の原則を遵守
- 関数の行数は50行以内を目安
- 副作用を最小限に抑える
- 純粋関数を優先

### クラス設計
- SOLIDの原則を適用
- 継承より合成を優先
- 抽象基底クラスの適切な使用
- データクラスの活用

### エラーハンドリング
- 具体的な例外クラスを使用
- 例外の再発生は適切に行う
- エラーコンテキストの保持
- ログ出力との連携

## パフォーマンス最適化

### アルゴリズム
- 時間計算量・空間計算量を考慮
- 適切なデータ構造の選択
- キャッシュの活用
- 遅延評価の実装

### メモリ管理
- ジェネレータの活用
- 大規模データの効率的な処理
- メモリリークの防止
- コンテキストマネージャーの使用

## テスト要件

### 単体テスト
- pytestの使用
- テストカバレッジ80%以上
- フィクスチャの適切な使用
- パラメータ化テストの活用

### テスト設計
- Arrange-Act-Assertパターン
- モックの適切な使用
- エッジケースのテスト
- 境界値テスト

## ドキュメント

### Docstring
- Google スタイルまたはNumPyスタイルで統一
- すべての公開関数・クラスに記述
- パラメータと戻り値の説明
- 使用例の提供（必要に応じて）

### コメント
- なぜそうしたかを説明（何をしているかは不要）
- 複雑なロジックには説明を追加
- TODOコメントは追跡可能に
- 日本語コメントOK（プロジェクト方針に従う）

## セキュリティ

### 入力検証
- すべての外部入力を検証
- SQLインジェクション対策
- パストラバーサル対策
- 適切なサニタイゼーション

### 機密情報管理
- 環境変数での管理
- ハードコーディング禁止
- 適切なアクセス制御
- ログへの機密情報出力禁止

## 非同期処理

### asyncio使用時
- 適切なasync/awaitの使用
- 並行処理の考慮
- タイムアウト処理の実装
- エラー伝播の適切な管理

### スレッドセーフティ
- 共有リソースの適切な管理
- ロックの使用を最小限に
- デッドロックの防止
- イミュータブルオブジェクトの活用

## 追加指示
- ログレベルの適切な設定（DEBUG, INFO, WARNING, ERROR, CRITICAL）
- 設定ファイルの外部化（環境別設定）
- デプロイメント考慮（12-Factor App準拠）
- CI/CDパイプラインでの自動チェック