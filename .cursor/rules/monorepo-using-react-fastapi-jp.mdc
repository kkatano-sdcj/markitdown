Python、React、FastAPI、TypeScript（フロントエンドのみ）、Material-UI、PostgreSQL、Pydantic、Poetry（パッケージ管理）、i18next（react-i18next）、Zustand、TanStack React Query、Alembic（データベースマイグレーション）、Stripe（サブスクリプションモデル）、Turborepo（モノレポ管理）に精通したエキスパート開発者であること。

コードスタイルと構造

- 簡潔で技術的なPythonコードを、正確な例を用いて記述してください。
- フロントエンドでは関数型および宣言型のプログラミングパターンを使用し、クラスの使用は避けてください。
- バックエンドではPythonの標準的な慣習に従い、適切にクラスと関数を使い分けてください。
- コードの重複よりも、反復処理とモジュール化を優先してください。
- 説明的な変数名を使用してください（例：`is_loading`、`has_error`）。
- エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、および型を含むファイルを構造化してください。
- フロントエンドのコンポーネントと関数には、名前付きエクスポートを推奨します。
- ディレクトリ名には、小文字とダッシュまたはアンダースコアを使用してください（例：`components/auth-wizard`、`api/user_management`）。

Python とバックエンド開発

- すべてのバックエンドコードにPythonを使用します。
- データ検証とシリアライゼーションにはPydanticを使用します。
- 型ヒントを活用し、可能な限り静的型チェックを行います。
- FastAPIのベストプラクティスに従い、依存性注入とミドルウェアを適切に活用します。
- async/awaitを適切に使用して、非同期プログラミングを実装します。

フロントエンド開発（TypeScript + React）

- フロントエンドコードにはTypeScriptを使用します。オブジェクトの形状については、型よりもインターフェースを優先します。
- 列挙型は使用せず、リテラル型またはマップを使用します。
- プロパティにはTypeScriptインターフェースを使用して関数型コンポーネントを実装します。

構文とフォーマット

- Pythonコードには Black、isort、flake8 を使用してフォーマットします。
- TypeScriptコードには Prettier、ESLint を使用します。
- 純粋関数には `function` キーワードを使用します（フロントエンド）。
- 明確で読みやすい構造を持つ宣言型JSXを記述します。
- 条件文では不要な中括弧を避け、単純な文には簡潔な構文を使用します。

UI とスタイル

- UIコンポーネントには Material-UI (MUI) を使用します。
- レスポンシブデザインをモバイルファーストのアプローチで実装します。
- 一貫したデザインシステムを構築し、Material-UIのテーマ機能を活用します。
- CSSファイルよりもstyled-componentsやemotion、Material-UIのsxプロパティを優先します。

状態管理とデータ取得

- フロントエンドの状態管理にはZustandを使用します。
- データの取得、キャッシュ、同期にはTanStack React Queryを使用します。
- `useEffect`と`setState`の使用を最小限に抑え、可能な場合は派生状態とメモ化を優先します。
- バックエンドでは適切な状態管理とキャッシュ戦略を実装します。

国際化

- Webアプリケーションにはi18nextとreact-i18nextを使用します。
- ユーザーに表示されるすべてのテキストが国際化され、ローカライズされていることを確認します。
- バックエンドのエラーメッセージやレスポンスも多言語対応を考慮します。

エラー処理と検証

- エラー処理とエッジケースを優先します。
- エラーとエッジケースは関数の先頭で処理します。
- エラー条件には早期リターンを使用し、深いネストを回避します。
- ガード句を使用して、前提条件と無効な状態を早期に処理します。
- 適切なエラーログとユーザーフレンドリーなエラーメッセージを実装します。
- FastAPIの例外ハンドリングとPydanticバリデーションエラーを適切に処理します。
- フロントエンドでは一貫したエラー処理のために、カスタムエラー型またはファクトリを使用します。

パフォーマンスの最適化

- フロントエンドとバックエンドの両方のパフォーマンスを最適化します。
- Reactでのコード分割には動的インポート（React.lazy）を使用します。
- 重要でないコンポーネントには遅延読み込みを実装します。
- FastAPIでは適切なキャッシュ戦略とデータベースクエリの最適化を行います。
- イメージを最適化するには、適切なフォーマットを使用し、サイズデータを含め、遅延読み込みを実装します。

モノレポ管理

- モノレポのセットアップには、Turborepoを使用したベストプラクティスに従います。
- パッケージが適切に分離され、依存関係が正しく管理されていることを確認します。
- 必要に応じて、共有設定とスクリプトを使用します。
- ルートの`package.json`と`pyproject.toml`で定義されているワークスペース構造を活用します。
- フロントエンドとバックエンドの依存関係を明確に分離します。

データベースとORM

- データベースにはPostgreSQLを使用します。
- ORMにはSQLAlchemyを使用し、FastAPIとの統合を適切に行います。
- データベースマイグレーションにはAlembicを使用します。
- データベーススキーマの設計では正規化とパフォーマンスのバランスを考慮します。
- Pydanticモデルを使用してAPIのリクエスト/レスポンススキーマを定義します。

API設計とバックエンド開発

- RESTfulなAPI設計原則に従います。
- FastAPIの自動ドキュメント生成機能を活用します。
- 適切なHTTPステータスコードとエラーレスポンスを実装します。
- 認証と認可には適切なセキュリティプラクティスを実装します（JWT、OAuth2など）。
- CORS設定を適切に行い、セキュリティを確保します。

パッケージ管理

- Pythonパッケージ管理にはPoetryを使用します。
- フロントエンドパッケージ管理にはnpmまたはyarnを使用します。
- 依存関係のバージョン固定と更新戦略を適切に管理します。
- 開発環境と本番環境で依存関係を適切に分離します。

Stripeとの連携とサブスクリプションモデル

- 決済処理とサブスクリプション管理のためにStripeを実装します。
- サブスクリプション管理にはStripeのカスタマーポータルを使用します。
- Stripeイベント（サブスクリプションの作成、更新、キャンセルなど）用のWebhookハンドラーを実装します。
- Stripeとの連携において、適切なエラー処理とセキュリティ対策を確実に実施します。
- サブスクリプションのステータスをデータベースのユーザーデータと同期します。

テストと品質保証

- バックエンドにはpytest、フロントエンドにはJest/React Testing Libraryを使用します。
- 重要なコンポーネントとAPI エンドポイントの単体テストと統合テストを作成します。
- コードカバレッジと品質メトリクスがプロジェクトの要件を満たしていることを確認します。
- テストデータベースとモックを適切に使用します。

プロジェクト構造と環境

- `frontend`、`backend`、`shared`のパッケージを個別に作成し、明確な責任分離を行います。
- Reactアプリケーションには`apps/frontend`ディレクトリを使用します。
- FastAPIアプリケーションには`apps/backend`ディレクトリを使用します。
- 共有コードとユーティリティには`packages/shared`ディレクトリを使用します。
- 環境変数管理には`python-dotenv`と`.env`ファイルを使用します。
- `pyproject.toml`、`requirements.txt`、および`package.json`内の環境固有の設定パターンに従ってください。

重要な規約

- 説明的で意味のあるコミットメッセージを使用してください。
- コードがクリーンで、適切にドキュメント化され、プロジェクトのコーディング規約に準拠していることを確認してください。
- アプリケーション全体で一貫したエラー処理とログ記録を実装してください。
- セキュリティベストプラクティスに従い、入力値の検証とサニタイゼーションを適切に行ってください。

公式ドキュメントに従ってください。

-
description:
globs:
alwaysApply: false
---
