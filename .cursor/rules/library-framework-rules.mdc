---
description: "markitdownアプリケーション開発で使用するライブラリ・フレームワークルール。Pandas、NumPy、ユーザーインターフェース、ファイル処理、パッケージング等のベストプラクティス。"
alwaysApply: true
---

# ライブラリ・フレームワークルール

## 役割定義
あなたはMarkitDown変換ツールで使用する各種ライブラリとフレームワークの適切な実装を担当するエンジニアです。
ベストプラクティスに従い、効率的で保守性の高い実装を行います。

## 主要タスク
- 各ライブラリの適切な使用方法の遵守
- フレームワーク固有のパターンの実装
- 依存関係の適切な管理
- バージョン互換性の考慮

## 依存関係管理

### パッケージ管理
- バックエンドのパッケージマネージャーは poetry を使用する
- バージョンの固定または範囲指定
- 開発用と本番用の依存関係の分離は不要
- セキュリティアップデートの追跡

### バージョン管理
- セマンティックバージョニングの理解
- 破壊的変更への対応
- アップグレードパスの計画
- 互換性マトリックスの維持

### ルーティング
- RESTful APIの設計原則
- 適切なHTTPメソッドの使用
- エンドポイントの命名規則
- バージョニング戦略

### ミドルウェア
- 認証・認可の実装
- CORS設定
- レート制限
- リクエスト/レスポンスのロギング

## ファイル処理ライブラリ
markitdown

### markitdownのgithubリポジトリ
https://github.com/microsoft/markitdown

### ファイル読み込み
- ストリーミング処理の実装
- エンコーディングの適切な処理
- 大容量ファイルへの対応
- エラーハンドリング

### 変換処理
- 効率的な変換アルゴリズム
- メモリ使用量の最適化
- 並列処理の活用
- プログレス通知の実装

## データ処理ライブラリ
### ライブラリ
#### コア
- pandas
- pydantic
- aiofiles

#### ドキュメント処理
- python-docx
- openpyxl
- pdfplumber
- python-pptx

#### 変換
- pandoc (pypandoc)
- BeautifulSoup4
- markdownify

### データ構造
- 適切なデータ型の選択
- イミュータブルデータの活用
- 効率的なデータアクセス
- メモリ効率の考慮

### 変換パイプライン
- ストリーム処理の実装
- エラー復旧機能
- 中間結果のキャッシング
- 並列化可能な設計

## テストフレームワーク
指定なし

### テスト構成
- テストの階層化
- フィクスチャの管理
- モックの適切な使用
- テストデータの管理

### 継続的テスト
- テストの自動実行
- カバレッジ測定
- パフォーマンステスト
- 回帰テストの実装

## ロギング・モニタリング
- Python: logging

### ログ設計
- 構造化ログの採用
- 適切なログレベル
- コンテキスト情報の付加
- ログローテーション

### メトリクス
- パフォーマンスメトリクス
- ビジネスメトリクス
- エラー率の追跡
- カスタムメトリクスの定義

## セキュリティライブラリ
指定なし

### 認証・認可
- トークンベース認証
- セッション管理
- 権限管理
- 多要素認証の実装

### データ保護
- 暗号化の実装
- ハッシュ化の適切な使用
- セキュアな乱数生成
- 機密データのマスキング

## ORM/データベースライブラリ
- Python: SQLAlchemy

### データモデリング
- 正規化の適切な適用
- インデックス戦略
- リレーションシップの定義
- マイグレーション管理

### クエリ最適化
- N+1問題の回避
- 遅延読み込みの活用
- バッチ処理の実装
- コネクションプーリング

## 追加指示
- 実装の第一選択は markitdown とする
- その他のデータ処理ライブラリは必要に応じて使用する
- パフォーマンス最適化とセキュリティ要件を常に考慮した実装を行う
